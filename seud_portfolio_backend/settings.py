"""
Django settings for seud_portfolio_backend project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path
from decouple import config, Csv
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", default="dev-secret-key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=True, cast=bool)

_ALLOWED_HOSTS_RAW = config("ALLOWED_HOSTS", default="localhost,127.0.0.1", cast=Csv())
if isinstance(_ALLOWED_HOSTS_RAW, (list, tuple)):
    ALLOWED_HOSTS = list(_ALLOWED_HOSTS_RAW)
elif isinstance(_ALLOWED_HOSTS_RAW, str):
    ALLOWED_HOSTS = [_ALLOWED_HOSTS_RAW]
else:
    ALLOWED_HOSTS = ["localhost", "127.0.0.1"]
# Auto-include Render external hostname if present
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME") or ""
if RENDER_EXTERNAL_HOSTNAME and RENDER_EXTERNAL_HOSTNAME not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party
    "rest_framework",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "django_filters",
    "drf_spectacular",
    # Local apps
    "portfolio.apps.PortfolioConfig",
    # Celery integrations
    "django_celery_results",
    "django_celery_beat",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "seud_portfolio_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "seud_portfolio_backend.wsgi.application"


# Database
# Prefer Supabase Postgres via DATABASE_URL or discrete env vars; fallback to SQLite.
# For Supabase pgbouncer (transaction mode), Django should avoid persistent connections and server-side cursors.
DATABASE_URL = str(config("DATABASE_URL", default=""))

def _pg_from_url(url: str):
    p = urlparse(url)
    return {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": (p.path or "/").lstrip("/"),
        "USER": p.username or "",
        "PASSWORD": p.password or "",
        "HOST": p.hostname or "",
        "PORT": p.port or 5432,
        "OPTIONS": {"sslmode": "require", "connect_timeout": 10},
        "CONN_MAX_AGE": 0,  # pgbouncer transaction pooling safe
        "DISABLE_SERVER_SIDE_CURSORS": True,
    }

if DATABASE_URL:
    DATABASES = {"default": _pg_from_url(DATABASE_URL)}
else:
    # Discrete Supabase/Postgres env vars (SUPABASE_DB_* preferred, POSTGRES_* fallback)
    DB_HOST = config("SUPABASE_DB_HOST", default=config("POSTGRES_HOST", default=""))
    if DB_HOST:
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.postgresql",
                "NAME": config("SUPABASE_DB_NAME", default=config("POSTGRES_DB", default="postgres")),
                "USER": config("SUPABASE_DB_USER", default=config("POSTGRES_USER", default="postgres")),
                "PASSWORD": config("SUPABASE_DB_PASSWORD", default=config("POSTGRES_PASSWORD", default="")),
                "HOST": DB_HOST,
                "PORT": config("SUPABASE_DB_PORT", default=config("POSTGRES_PORT", default=6543), cast=int),
                "OPTIONS": {"sslmode": "require", "connect_timeout": 10},
                "CONN_MAX_AGE": 0,
                "DISABLE_SERVER_SIDE_CURSORS": True,
            }
        }
    else:
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": BASE_DIR / "db.sqlite3",
            }
        }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Serve compressed, versioned static files
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django REST Framework
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "portfolio.permissions.IsAdminOrReadOnly",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
    ),
    # Throttle rates for scoped throttles used in views
    "DEFAULT_THROTTLE_RATES": {
        "contact": "10/hour",
        "chat": "30/minute",
    },
}

# drf-spectacular
SPECTACULAR_SETTINGS = {
    "TITLE": "Portfolio API",
    "DESCRIPTION": "API for portfolio content and AI chat",
    "VERSION": "1.0.0",
}

# CORS
CORS_ALLOWED_ORIGINS_RAW = config(
    "CORS_ALLOWED_ORIGINS", default="http://localhost:3000", cast=Csv()
)

def _normalize_origin(value: str) -> str:
    s = value.strip().rstrip("/")
    if not s:
        return s
    parsed = urlparse(s)
    if parsed.scheme and parsed.netloc:
        return f"{parsed.scheme}://{parsed.netloc}"
    return s

# Build CORS_ALLOWED_ORIGINS safely
if not isinstance(CORS_ALLOWED_ORIGINS_RAW, (list, tuple)):
    CORS_ALLOWED_ORIGINS_RAW = [str(CORS_ALLOWED_ORIGINS_RAW)] if CORS_ALLOWED_ORIGINS_RAW else []
CORS_ALLOWED_ORIGINS = []
_cors_set = set()
for orig_val in CORS_ALLOWED_ORIGINS_RAW:
    _n = _normalize_origin(orig_val)
    if _n:
        _cors_set.add(_n)
CORS_ALLOWED_ORIGINS = list(_cors_set)
CORS_ALLOW_CREDENTIALS = True

# CSRF trusted origins (include frontends and render host)
CSRF_TRUSTED_ORIGINS_RAW = config("CSRF_TRUSTED_ORIGINS", default="", cast=Csv())
# Ensure iterable (Csv() returns a list for strings; guard odd cases/types)
if not isinstance(CSRF_TRUSTED_ORIGINS_RAW, (list, tuple)):
    CSRF_TRUSTED_ORIGINS_RAW = [str(CSRF_TRUSTED_ORIGINS_RAW)] if CSRF_TRUSTED_ORIGINS_RAW else []
# Build CSRF_TRUSTED_ORIGINS by normalizing provided origins and ensuring https variants
_csrf_set = set()
for _o in CSRF_TRUSTED_ORIGINS_RAW:
    _n = _normalize_origin(_o)
    if not _n:
        continue
    _csrf_set.add(_n)
    # Add https variant if http is provided (common for local dev -> prod)
    if _n.startswith("http://"):
        _csrf_set.add(_n.replace("http://", "https://", 1))
CSRF_TRUSTED_ORIGINS = list(_csrf_set)
if RENDER_EXTERNAL_HOSTNAME:
    CSRF_TRUSTED_ORIGINS.append(f"https://{RENDER_EXTERNAL_HOSTNAME}")
for orig_val in CORS_ALLOWED_ORIGINS:
    # Add matching https origin for CSRF if not present
    if orig_val.startswith("http://"):
        CSRF_TRUSTED_ORIGINS.append(orig_val.replace("http://", "https://", 1))
    else:
        CSRF_TRUSTED_ORIGINS.append(orig_val)
CSRF_TRUSTED_ORIGINS = list({u for u in CSRF_TRUSTED_ORIGINS if u})

# Basic security headers (safe defaults for dev; review for production)
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
X_FRAME_OPTIONS = "DENY"

# Trust X-Forwarded-Proto from proxy (Render)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    # Enable HSTS (start with lower value; raise once confirmed)
    SECURE_HSTS_SECONDS = config("SECURE_HSTS_SECONDS", default=3600, cast=int)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# SimpleJWT
SIMPLE_JWT = {
    # Token lifetimes
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=3),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),

    # Refresh rotation and blacklist (requires token_blacklist app + migration)
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,

    # Auth header handling
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",

    # Token format/claims
    "ALGORITHM": "HS256",
    # SIGNING_KEY defaults to Django SECRET_KEY; override via SIMPLE_JWT if needed
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",

    # Classes used for auth
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),

    # Optional: if you switch to sliding tokens later
    "SLIDING_TOKEN_LIFETIME": timedelta(hours=3),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=30),
}

# Supabase storage (used for media in production; local files in dev)
# Distinguish the project API URL from any DB URLs. Prefer SUPABASE_PROJECT_URL, else use SUPABASE_URL if it looks like https.
_SUPABASE_PROJECT_URL_RAW = config("SUPABASE_PROJECT_URL", default=config("SUPABASE_URL", default=""))
SUPABASE_PROJECT_URL = _SUPABASE_PROJECT_URL_RAW if str(_SUPABASE_PROJECT_URL_RAW).startswith("http") else ""
SUPABASE_ANON_KEY = config("SUPABASE_ANON_KEY", default="")
# Prefer service role key for server-side uploads if provided; accept SUPABASE_SERVICE_KEY alias
SUPABASE_SERVICE_ROLE_KEY = config("SUPABASE_SERVICE_ROLE_KEY", default=config("SUPABASE_SERVICE_KEY", default=""))
SUPABASE_BUCKET = config("SUPABASE_BUCKET", default="media")

# S3/Compatible storage for media in production (recommended on Render)
AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID", default="")
AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY", default="")
AWS_STORAGE_BUCKET_NAME = config("AWS_S3_BUCKET_NAME", default="")
AWS_S3_REGION_NAME = config("AWS_S3_REGION_NAME", default="")
AWS_S3_ENDPOINT_URL = config("AWS_S3_ENDPOINT_URL", default="")  # optional for R2/DO Spaces
if AWS_STORAGE_BUCKET_NAME:
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    AWS_QUERYSTRING_AUTH = False
    AWS_S3_FILE_OVERWRITE = False
    AWS_DEFAULT_ACL = None
    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
    if AWS_S3_ENDPOINT_URL:
        AWS_S3_SIGNATURE_VERSION = "s3v4"
    # Media URL from bucket (Render has no persistent disk)
    if AWS_S3_ENDPOINT_URL:
        _endpoint_str = f"{AWS_S3_ENDPOINT_URL}".rstrip("/")
        MEDIA_URL = f"{_endpoint_str}/{AWS_STORAGE_BUCKET_NAME}/"
    else:
        MEDIA_URL = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/"
elif SUPABASE_PROJECT_URL and SUPABASE_BUCKET:
    # Use Supabase storage for media
    DEFAULT_FILE_STORAGE = "portfolio.storage_backends.SupabaseMediaStorage"
    MEDIA_URL = f"{str(SUPABASE_PROJECT_URL).rstrip('/')}/storage/v1/object/public/{SUPABASE_BUCKET}/"

# Redis cache (used also by Celery if configured)
REDIS_URL = config("REDIS_URL", default="redis://127.0.0.1:6379/0")
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": REDIS_URL,
        "TIMEOUT": 300,
    }
}

# Email (console in dev)
EMAIL_BACKEND = config(
    "EMAIL_BACKEND",
    default="django.core.mail.backends.console.EmailBackend",
)
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL", default="no-reply@example.com")

# AI providers
GOOGLE_API_KEY = config("GOOGLE_API_KEY", default="")
GROQ_API_KEY = config("GROQ_API_KEY", default="")
GITHUB_TOKEN = config("GITHUB_TOKEN", default="")

# Celery
CELERY_BROKER_URL = config("CELERY_BROKER_URL", default=REDIS_URL)
CELERY_RESULT_BACKEND = config("CELERY_RESULT_BACKEND", default="django-db")
CELERY_TASK_ALWAYS_EAGER = config("CELERY_TASK_ALWAYS_EAGER", default=False, cast=bool)
CELERY_TIMEZONE = TIME_ZONE
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
if os.name == "nt":  # Windows prefers solo pool
    CELERY_WORKER_POOL = "solo"

# Logging to stdout (12-factor)
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {"format": "%(asctime)s %(levelname)s %(name)s: %(message)s"},
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        }
    },
    "root": {"handlers": ["console"], "level": "INFO"},
    "loggers": {
        "django": {"handlers": ["console"], "level": "INFO", "propagate": False},
        "django.request": {"handlers": ["console"], "level": "WARNING", "propagate": False},
        "django.security": {"handlers": ["console"], "level": "WARNING", "propagate": False},
    },
}
